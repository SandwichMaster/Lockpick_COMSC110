<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Ctrl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize lock &amp; create center point

InitializeLock();

instance_create((room_width/2),((room_height/2)+ 80),CenterPoint);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///compare angles

if (instance_exists(TouchTracker)){

    //find touch point
    var finger = instance_find(TouchTracker,0)
    //find center point
    var center = instance_find(CenterPoint,0)
    
    //find vector (angle)
    var angle = point_direction((center).x,(center).y,(finger).x,(finger).y);
    //find distance (length)
    var length = point_distance((center).x,(center).y,(finger).x,(finger).y);
    //find orders of magnitude away
    var magnitude = CheckAngle(angle,length);

    //check for a non-zero return value
    if (magnitude != 0){
        //check for a not-unlocked value
        if (magnitude != 200){
            PickHealth(magnitude); 
        }
    }
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for unlocked or game over

if (global.unlockCheck == true){
    score += 1;
    InitializeLock();
}
else if(global.gameOver == true){
    
    game_end();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///[debug]Draw data (position, angle, sweetspot, length, &amp; durability)

var center = instance_find(CenterPoint,0);

if (instance_exists(TouchTracker)){
    var finger = instance_find(TouchTracker,0);
}
else {
    var finger = 0
}
var angle = point_direction((center).x,(center).y,(finger).x,(finger).y);

var length = point_distance((center).x,(center).y,(finger).x,(finger.y));

if (debug_mode == true){
    draw_set_colour(c_black);
    draw_set_alpha(1);
    show_debug_message("Drawing");

    draw_text(self.x + 30,self.y + 60,"X:" + string(device_mouse_x(0)));
    draw_text(self.x + 30,self.y + 80,"Y:" + string(device_mouse_y(0)));
    draw_text(self.x + 30, self.y + 100, "angle:" + string(angle));
    draw_text(self.x + 30, self.y + 120, "sweetspot:" + string(global.sweetspot));
    draw_text(self.x + 30, self.y + 140, "length:" + string(length));
    draw_text(self.x + 30, self.y + 160, "durability:" + string(global.pickHealth));
    draw_text(self.x + 30, self.y + 180, "picks left:" + string(global.picks));
    draw_text(self.x + 30, self.y + 200, "unlocked:" + string(global.unlockCheck));
    
}
else {
    show_debug_message("X:" + string(device_mouse_x(0)) + ", Y:" + string(device_mouse_y(0)) + ", angle:" + string(angle) + ", sweetspot:" + string(global.sweetspot) + ", length:" + string(length) + ", durability:" + string(global.pickHealth) + ", picks left:" + string(global.picks) + ", unlocked:" + string(global.unlockCheck));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw unlock circle &amp; outside circle

var center = instance_find(CenterPoint,0);

draw_circle_colour(center.x,center.y,400,c_black,c_black,false)
draw_circle_colour(center.x,center.y,380,c_fuchsia,c_fuchsia,false)
draw_circle_colour(center.x,center.y,200,c_black,c_black,false);
draw_circle_colour(center.x,center.y,180,c_blue,c_blue,false);

draw_rectangle_colour(0,center.y,1080,center.y+410,c_teal,c_teal,c_teal,c_teal,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw durability bar
var x1 =50;
var y1 =1750;

var x2 = 50 + (980 * (global.pickHealth/100));
var y2 = 1800;


draw_rectangle_colour(x1,y1,x2,y2,c_black, c_white, c_white, c_black, false);
draw_rectangle(x1+1,y1+1,x2+1,y2+1,true)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw score and picks remaining;

draw_text_transformed_colour(50,1500,("Score: " + string(score)), 4,4.5,0,c_black,c_black,c_black,c_black,1);

draw_text_transformed_colour(50,1580,("Picks Remaining: " + string(global.picks)), 4,4.5,0,c_black,c_black,c_black,c_black,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
